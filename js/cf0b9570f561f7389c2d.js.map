{"version":3,"file":"js/cf0b9570f561f7389c2d.js","mappings":"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","sources":["webpack://fausteditorweb/./src/monaco-faust/Faust2Doc.ts","webpack://fausteditorweb/./src/monaco-faust/Faust2MD.ts","webpack://fausteditorweb/./src/monaco-faust/FaustLang.ts"],"sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { Faust2MD } from \"./Faust2MD\";\n/*\nRetrive faust2md doc by parsing .dsp file\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\n--------------------------------------------------------\n*/\nexport type TFaustDocs = { [key: string]: TFaustDoc };\nexport type TFaustDoc = { path: string[]; name: string; doc: string };\n/**\n *\n * @class Faust2Doc\n */\nexport class Faust2Doc {\n    private static readonly REGEX_DEF_LIB = /\\b(\\w+)\\s*=\\s*library\\(\"(.+)\"\\);/;\n    private static readonly REGEX_DEF_IMP = /\\bimport\\(\"(.+)\"\\);/;\n    private static readonly REGEX_FUNC_NAME = /`.*?([\\w[\\]|]+)`/;\n    private static readonly REGEX_FUNC_NAME_COND = /\\[(.+?)(\\|.+?)*?]/;\n    /**\n     * Retrieve a library definition\n     *\n     * @static\n     * @param {string} line\n     * @returns {{ namespace: string, fileName: string }[]}\n     * @memberof Faust2Doc\n     */\n    static matchLibrary(line: string): { namespace: string; fileName: string }[] {\n        const libs = [] as { namespace: string; fileName: string }[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_LIB, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_LIB);\n                if (matched) libs.push({ namespace: matched[1], fileName: matched[2] });\n            });\n        }\n        return libs;\n    }\n    /**\n     * Retrieve an import expression\n     *\n     * @static\n     * @param {string} line\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static matchImport(line: string): string[] {\n        const imps = [] as string[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_IMP, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_IMP);\n                if (matched) imps.push(matched[1]);\n            });\n        }\n        return imps;\n    }\n    /**\n     * Retrieve true function name from string in comments\n     * `(si.)bus`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchFuncName(str: string): string {\n        const matched = str.match(this.REGEX_FUNC_NAME);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Get all conditions in func name like `[third|half]_octave_[analyzer|filterbank][n]`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static getAllConditions(str: string): string[] {\n        return this.getCondition([str]);\n    }\n    /**\n     * getAllConditions Recursive body\n     *\n     * @static\n     * @param {string[]} [condsIn]\n     * @param {RegExp} [regexp]\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    private static getCondition(condsIn?: string[]): string[] {\n        const conds = [] as string[];\n        condsIn.forEach((cond) => {\n            const regexp = new RegExp(this.REGEX_FUNC_NAME_COND, \"g\");\n            const result = regexp.exec(cond);\n            if (!result) return;\n            const found = result[0];\n            const index = result.index;\n            const subConds = result.splice(1).filter(el => typeof el === \"string\").map(str => str.replace(/^\\|/, \"\"));\n            const before = cond.substring(0, index);\n            const after = cond.substring(index + found.length);\n            if (subConds.length === 1) {\n                conds.push(before + after);\n                conds.push(before + subConds + after);\n            } else {\n                subConds.forEach(subCond => conds.push(before + subCond + after));\n            }\n        });\n        return conds.length ? this.getCondition(conds) : condsIn;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} fileName fileName to be fetch using getFile\n     * @param {string} getFile callback used for import and library expressions\n     * @param {string[]} [depthIn] current Depth, stop when 0;\n     * @param {string[]} [pathIn] path of current namespace\n     * @param {string} [docIn] recursive accum object for output\n     * @returns {Promise<TFaustDocs>}\n     * @memberof Faust2MD\n     */\n    static async parse(fileName: string, getFile: (fileName: string) => Promise<string>, depthIn?: number, pathIn?: string[], docIn?: TFaustDocs): Promise<TFaustDocs> {\n        if (depthIn === 0) return docIn;\n        const depth = depthIn || 2;\n        const strIn = await getFile(fileName);\n        const doc: TFaustDocs = docIn || {};\n        const path = pathIn || [];\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        let curName = \"\"; // current function name\n        let strBuffer = \"\"; // current function doc\n        const lines = strIn.split(\"\\n\");\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            if (!line) continue; // empty line\n            if (!Faust2MD.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    inComment = false;\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                const libs = this.matchLibrary(line);\n                const imps = this.matchImport(line);\n                for (let j = 0; j < libs.length; j++) {\n                    const lib = libs[j];\n                    await this.parse(lib.fileName, getFile, depth - 1, [...path, lib.namespace], doc);\n                }\n                for (let j = 0; j < imps.length; j++) {\n                    const imp = imps[j];\n                    await this.parse(imp, getFile, depth - 1, path, doc);\n                }\n                continue;\n            }\n            if (inComment) { // we are in a md-comment (not first line)\n                if (idt === 0) idt = Faust2MD.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: Faust2MD.matchEndComment(line), endS: Faust2MD.matchEndSection(line), endT: Faust2MD.matchEndTitle(line) };\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strBuffer += Faust2MD.outdent(line, idt) + \"\\n\";\n                if (endC) { // pop buffer\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                continue;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: Faust2MD.matchBeginComment(line), s: Faust2MD.matchBeginSection(line), t: Faust2MD.matchBeginTitle(line) };\n            if (c) curName = this.matchFuncName(c);\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n                strBuffer = \"\";\n            }\n        }\n        return doc;\n    }\n}\n","/*\n\nUltra simple automatic documentation system for Faust.\nCreates a markdown file by extracting the comments from\na Faust file. The option -t n can be used to change the\ndefault (4) tab setting. The option -c can be used to\ninclude the Faust code itself into the generated doc.\nAnd the option -f can be used to include a YAML front\nmatter with the name of the file and the date.\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\nThe translation is the following:\n  ## foo(x,y)\n    markdown text....\n    markdown text....\n--------------------------------------------------------\n*/\ntype Faust2MDOptions = { tabsize: number; code: boolean; front: boolean };\n/**\n * faust2md ts port\n *\n * @class Faust2MD\n */\nexport class Faust2MD {\n    private static readonly REGEX_BEG_TITLE = /^\\s*\\/\\/#{3,}\\s*([^#]*[^#\\s])\\s*#{3,}$/;\n    private static readonly REGEX_END_TITLE = /^\\s*((\\/\\/#{3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_SECTION = /^\\s*\\/\\/={3,}\\s*([^=]*[^=\\s])\\s*={3,}$/;\n    private static readonly REGEX_END_SECTION = /^\\s*((\\/\\/={3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_COMMENT = /^\\s*\\/\\/-{3,}\\s*([^-]*[^=\\s])\\s*-{3,}$/;\n    private static readonly REGEX_END_COMMENT = /^\\s*((\\/\\/-{3,})|(\\s*))$/;\n    private static readonly REGEX_INDENT = /(^\\s*\\/\\/\\s*)[^\\s]/;\n    private static readonly REGEX_COMMENT = /^\\s*\\/\\//;\n    /**\n     * Print the front matter of the file\n     *\n     * @static\n     * @param {string} fileName\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static frontMatter(fileName: string): string {\n        return \"---\\n\"\n        + `file: ${fileName}\\n`\n        + `date: ${new Date().toLocaleDateString()}\\n`\n        + \"---\\n\";\n    }\n    /**\n     * Outdent a comment line by n characters in\n     * order to remove the prefix \"//   \"\n     *\n     * @static\n     * @param {string} line\n     * @param {number} idt\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static outdent(line: string, idt: number): string {\n        return line.length <= idt ? \"\\n\" : line.substr(idt);\n    }\n    /**\n     * Match the first line of a title\n     * of type \"//#### Title ####\"\n     * at least 3 # are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginTitle(line: string): string {\n        const matched = line.match(this.REGEX_BEG_TITLE);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a title\n     * of type \"//########\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndTitle(line: string): boolean {\n        const matched = line.match(this.REGEX_END_TITLE);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a section\n     * of type \"//==== Section ====\"\n     * at least 3 = are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginSection(line: string): string {\n        const matched = line.match(this.REGEX_BEG_SECTION);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a section\n     * of type \"//=======\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndSection(line: string): boolean {\n        const matched = line.match(this.REGEX_END_SECTION);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a comment\n     * of type \"//--- foo(x,y) ----\"\n     * at least 3 - are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginComment(line: string): string {\n        const matched = line.match(this.REGEX_BEG_COMMENT);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a comment\n     * of type \"//-----------------\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndComment(line: string): boolean {\n        const matched = line.match(this.REGEX_END_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Measure the indentation of a md-comment line\n     * that is the len of the prefix '//   '\n     *\n     * @static\n     * @param {string} line\n     * @returns {number}\n     * @memberof Faust2MD\n     */\n    static indentation(line: string): number {\n        const matched = line.match(this.REGEX_INDENT);\n        return matched ? matched[1].length : 0;\n    }\n    /**\n     * Indicates if a line is a comment\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static isComment(line: string): boolean {\n        const matched = line.match(this.REGEX_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} strIn\n     * @param {string} [fileName]\n     * @param {{ tabsize?: number, code?: boolean, front?: boolean }} [optionsIn]\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static parse(strIn: string, fileName?: string, optionsIn?: { tabsize?: number; code?: boolean; front?: boolean }): string {\n        const options: Faust2MDOptions = { tabsize: 4, code: false, front: false, ...optionsIn };\n        let strOut = \"\";\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        if (options.front && fileName) strOut += this.frontMatter(fileName);\n        strIn.split(\"\\n\").forEach((line) => {\n            if (!this.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    strOut += \"\\n\";\n                    inComment = false;\n                }\n                if (options.code) strOut += `\\t${line}\\n`;\n                return;\n            }\n            if (inComment) { // we are in a md-comment\n                if (idt === 0) idt = this.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: this.matchEndComment(line), endS: this.matchEndSection(line), endT: this.matchEndTitle(line) };\n                if (endC) strOut += \"\\n---\\n\\n\";\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strOut += this.outdent(line, idt) + \"\\n\";\n                return;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: this.matchBeginComment(line), s: this.matchBeginSection(line), t: this.matchBeginTitle(line) };\n            if (c) strOut += `\\n### ${c}\\n`;\n            else if (s) strOut += `\\n## ${s}\\n`;\n            else if (t) strOut += `\\n# ${t}\\n`;\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n            } else if (options.code) strOut += `\\t${line}\\n`;\n        });\n        return strOut;\n    }\n}\n","import { languages, editor, Position, Range } from \"monaco-editor\";\nimport { LibFaust } from \"@grame/faustwasm\";\nimport { Faust2Doc, TFaustDocs, TFaustDoc } from \"./Faust2Doc\";\n\nimport { docSections, faustDocURL } from \"../documentation\";\n\nexport type FaustLanguageProviders = {\n    hoverProvider: languages.HoverProvider;\n    tokensProvider: languages.IMonarchLanguage;\n    completionItemProvider: languages.CompletionItemProvider;\n    docs: TFaustDocs;\n};\nexport const language: languages.ILanguageExtensionPoint = {\n    id: \"faust\",\n    extensions: [\"dsp\", \"lib\"],\n    mimetypes: [\"application/faust\"]\n};\nexport const config: languages.LanguageConfiguration = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\"/*\", \"*/\"]\n    },\n    brackets: [\n        [\"{\", \"}\"],\n        [\"[\", \"]\"],\n        [\"(\", \")\"]\n    ],\n    autoClosingPairs: [\n        { open: \"{\", close: \"}\" },\n        { open: \"[\", close: \"]\" },\n        { open: \"(\", close: \")\" },\n        { open: '\"', close: '\"', notIn: [\"string\"] },\n        { open: \"/*\", close: \"*/\", notIn: [\"string\"] }\n    ]\n};\nexport const theme: editor.IStandaloneThemeData = {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n        { token: \"faustFunctions\", foreground: \"DDDD99\" },\n        { token: \"faustKeywords\", foreground: \"4499CC\" },\n        { token: \"faustLib\", foreground: \"CCCCBB\" },\n        { token: \"faustCompOperators\", foreground: \"FFDDFF\" },\n        { token: \"identifier\", foreground: \"77CCFF\" }\n    ],\n    colors: {}\n};\nconst faustKeywords = [\n    \"import\", \"component\", \"declare\", \"library\", \"environment\", \"int\", \"float\",\n    \"letrec\", \"with\", \"class\", \"process\", \"effect\", \"inputs\", \"outputs\"\n];\nconst faustFunctions = [\n    \"mem\", \"prefix\", \"rdtable\", \"rwtable\",\n    \"select2\", \"select3\", \"ffunction\", \"fconstant\", \"fvariable\",\n    \"route\", \"waveform\", \"soundfile\",\n    \"button\", \"checkbox\", \"vslider\", \"hslider\", \"nentry\",\n    \"vgroup\", \"hgroup\", \"tgroup\", \"vbargraph\", \"hbargraph\", \"attach\",\n    \"acos\", \"asin\", \"atan\", \"atan2\", \"cos\", \"sin\", \"tan\", \"exp\",\n    \"log\", \"log10\", \"pow\", \"sqrt\", \"abs\", \"min\", \"max\", \"fmod\",\n    \"remainder\", \"floor\", \"ceil\", \"rint\", \"round\",\n    \"seq\", \"par\", \"sum\", \"prod\"\n];\nconst getFile = async (fileName: string, libFaust: LibFaust) => {\n    if (libFaust) return libFaust.fs().readFile(\"/usr/share/faust/\" + fileName, { encoding: \"utf8\" }) as string;\n    const libPath = \"https://faustlibraries.grame.fr/libs/\";\n    const res = await fetch(libPath + fileName);\n    return res.text();\n};\ntype TMatchedFaustDoc = { nameArray: string[]; name: string; range: Range; doc: TFaustDoc };\n/**\n * Match an available doc key from monaco editor\n *\n * @param {TFaustDocs} doc\n * @param {editor.ITextModel} model\n * @param {Position} position\n * @returns {TMatchedFaustDoc} full: [...prefixes, name], range: a monaco range object, doc: a FaustDoc object\n */\nexport const matchDocKey = (doc: TFaustDocs, model: editor.ITextModel, position: Position): TMatchedFaustDoc => {\n    const line$ = position.lineNumber;\n    const line = model.getLineContent(line$);\n    const wordAtPosition = model.getWordAtPosition(position);\n    if (!wordAtPosition) return null;\n    let column$ = wordAtPosition.startColumn - 1;\n    const name = wordAtPosition.word;\n    const prefixes: string[] = [];\n    while (column$ - 2 >= 0 && line[column$ - 1] === \".\") {\n        column$ -= 2;\n        const prefixWord = model.getWordAtPosition(new Position(line$, column$));\n        prefixes.splice(0, 0, prefixWord.word);\n        column$ = prefixWord.startColumn - 1;\n    }\n    const nameArray = [...prefixes, name];\n    while (nameArray.length) {\n        const name = nameArray.join(\".\");\n        const e = doc[name];\n        if (e) {\n            return {\n                nameArray,\n                name,\n                range: new Range(line$, column$ + 1, line$, wordAtPosition.endColumn),\n                doc: e\n            };\n        }\n        column$ += nameArray.splice(0, 1)[0].length + 1;\n    }\n    return null;\n};\nexport const getProviders = async (libFaust: LibFaust): Promise<FaustLanguageProviders> => {\n    let libDocs: TFaustDocs = {};\n    let primDocs: TFaustDocs = {};\n    try {\n        libDocs = await Faust2Doc.parse(\"stdfaust.lib\", async (fileName: string) => getFile(fileName, libFaust));\n        primDocs = await Faust2Doc.parse(\"primitives.lib\", async (fileName: string) => getFile(fileName, libFaust));\n    } catch (e) { console.error(e); } // eslint-disable-line no-empty, no-console\n    const faustLib = Object.keys(libDocs);\n\n    const hoverProvider: languages.HoverProvider = {\n        provideHover: (model, position) => {\n            const matched = matchDocKey({ ...primDocs, ...libDocs }, model, position);\n            if (matched) {\n                const prefix = matched.nameArray.slice();\n                const name = prefix.pop();\n                const doc = matched.doc;\n                return {\n                    range: matched.range,\n                    contents: [\n                        { value: `\\`\\`\\`\\n${prefix.length ? \"(\" + prefix.join(\".\") + \".)\" : \"\"}${name}\\n\\`\\`\\`` },\n                        { value: doc.doc.replace(/#+/g, \"######\") },\n                        { value: prefix.length ? `[Detail...](${faustDocURL}/${docSections[prefix.slice(0, 2).join(\"\")]}/#${prefix.join(\".\")}${doc.name.replace(/[[\\]|]/g, \"\").toLowerCase()})` : \"[Detail...](https://faustdoc.grame.fr/manual/syntax/index.html#faust-syntax)\" }\n                    ]\n                };\n            }\n            return null;\n        }\n    };\n    const tokensProvider: languages.IMonarchLanguage = ({\n        faustKeywords,\n        faustFunctions,\n        faustLib,\n        defaultToken: \"invalid\",\n        tokenPostfix: \".dsp\",\n        faustCompOperators: [\n            \"~\", \",\", \":\", \"<:\", \":>\"\n        ],\n        operators: [\n            \"=\",\n            \"+\", \"-\", \"*\", \"/\", \"%\", \"^\",\n            \"&\", \"|\", \"xor\", \"<<\", \">>\",\n            \">\", \"<\", \"==\", \"<=\", \">=\", \"!=\",\n            \"@\", \"'\"\n        ],\n        // we include these common regular expressions\n        symbols: /[=><!~?:&|+\\-*/^%]+/,\n        // C# style strings\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n        // The main tokenizer for our languages\n        tokenizer: {\n            root: [\n                // identifiers and keywords\n                [/!|_/, \"keyword\"],\n                [/[a-z_$]([\\w.$]*[\\w$])?/, {\n                    cases: {\n                        \"@faustFunctions\": \"faustFunctions\",\n                        \"@faustKeywords\": \"faustKeywords\",\n                        \"@faustLib\": \"faustLib\",\n                        \"@default\": \"identifier\"\n                    }\n                }],\n                [/[A-Z][\\w$]*/, \"type.identifier\"],\n                // whitespace\n                { include: \"@whitespace\" },\n                // delimiters and operators\n                [/[{}()[\\]]/, \"@brackets\"],\n                [/~|,|<:|:>|:/, \"faustCompOperators\"],\n                [/[<>](?!@symbols)/, \"@brackets\"],\n                [/=|\\+|-|\\*|\\/|%|\\^|&|\\||xor|<<|>>|>|<|==|<=|>=|!=|@|'/, {\n                    cases: {\n                        \"@operators\": \"operators\",\n                        \"@default\": \"\"\n                    }\n                }],\n                // numbers\n                [/\\d*\\.\\d+([eE][-+]?\\d+)?/, \"number.float\"],\n                [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n                [/\\d+/, \"number\"],\n                // delimiter: after number because of .\\d floats\n                [/[;.]/, \"delimiter\"],\n                // strings\n                [/\"/, { token: \"string\", next: \"@string\" }]\n            ],\n            comment: [\n                [/[^/*]+/, \"comment\"],\n                [/\\/\\*/, \"comment\", \"@push\"],\n                [/\\*\\//, \"comment\", \"@pop\"],\n                [/[/*]/, \"comment\"]\n            ],\n            string: [\n                [/[^\\\\\"$]+/, \"string\"],\n                [/@escapes/, \"string.escape\"],\n                [/\\\\./, \"string.escape.invalid\"],\n                [/\"/, \"string\", \"@pop\"]\n            ],\n            whitespace: [\n                [/[ \\t\\r\\n]+/, \"white\"],\n                [/\\/\\*/, \"comment\", \"@comment\"],\n                [/\\/\\/.*$/, \"comment\"]\n            ]\n        }\n    } as any);\n    const completionItemProvider: languages.CompletionItemProvider = {\n        provideCompletionItems: () => {\n            const suggestions: languages.CompletionItem[] = [];\n            [...faustKeywords, ...faustFunctions, ...faustLib].forEach((e) => {\n                suggestions.push({\n                    label: e,\n                    kind: languages.CompletionItemKind.Text,\n                    insertText: e,\n                    range: null\n                });\n            });\n            return { suggestions };\n        }\n    };\n    return { hoverProvider, tokensProvider, completionItemProvider, docs: libDocs };\n};\n"],"names":["Faust2MD","Faust2Doc","matchLibrary","line","libs","exps","match","RegExp","REGEX_DEF_LIB","forEach","exp","matched","push","namespace","fileName","matchImport","imps","REGEX_DEF_IMP","matchFuncName","str","REGEX_FUNC_NAME","getAllConditions","getCondition","condsIn","conds","cond","regexp","REGEX_FUNC_NAME_COND","result","exec","found","index","subConds","splice","filter","el","map","replace","before","substring","after","length","subCond","parse","getFile","depthIn","pathIn","docIn","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","depth","strIn","doc","path","inComment","idt","curName","strBuffer","lines","i","j","lib","_j","imp","_endC$endS$endT","endC","endS","endT","_c$s$t","c","s","t","wrap","_callee$","_context","prev","next","abrupt","sent","split","isComment","name","concat","join","indentation","matchEndComment","matchEndSection","matchEndTitle","outdent","matchBeginComment","matchBeginSection","matchBeginTitle","stop","_defineProperty","frontMatter","Date","toLocaleDateString","substr","REGEX_BEG_TITLE","REGEX_END_TITLE","REGEX_BEG_SECTION","REGEX_END_SECTION","REGEX_BEG_COMMENT","REGEX_END_COMMENT","REGEX_INDENT","REGEX_COMMENT","optionsIn","options","_objectSpread","tabsize","code","front","strOut","languages","Position","Range","docSections","faustDocURL","language","id","extensions","mimetypes","config","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","theme","base","inherit","rules","token","foreground","colors","faustKeywords","faustFunctions","_ref","libFaust","libPath","res","fs","readFile","encoding","fetch","text","_x","_x2","apply","arguments","matchDocKey","model","position","line$","lineNumber","getLineContent","wordAtPosition","getWordAtPosition","column$","startColumn","word","prefixes","prefixWord","nameArray","e","range","endColumn","getProviders","_ref2","_callee4","libDocs","primDocs","faustLib","hoverProvider","tokensProvider","completionItemProvider","_callee4$","_context4","_ref3","_callee2","_callee2$","_context2","_x4","_ref4","_callee3","_callee3$","_context3","_x5","t0","console","error","Object","keys","provideHover","prefix","slice","pop","contents","value","toLowerCase","defaultToken","tokenPostfix","faustCompOperators","operators","symbols","escapes","tokenizer","root","cases","include","comment","string","whitespace","provideCompletionItems","suggestions","label","kind","CompletionItemKind","Text","insertText","docs","_x3"],"sourceRoot":""}